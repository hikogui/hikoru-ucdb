// This file was generated by the cargo-build script.

const WHITE_SPACE_CHUNK_SIZE : usize = 128;
const WHITE_SPACE_COLUMN_BITS : usize = 1;
const WHITE_SPACE_INDEX_LEN : usize = 98;
const WHITE_SPACE_INDEX_BITS : usize = 3;

const WHITE_SPACE_INDEX_BYTE_OFFSET : usize = 80;

const WHITE_SPACE_DATA: [u8; 118] = [
    // Column table
      0, 62,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 32,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    255,  7,  0,  0,  0,131,  0,  0,  0,  0,  0,128,  0,  0,  0,  0,
    // Index table
    136, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146,164, 73,146, 36, 73,146, 36, 73,148, 36, 73,146, 36, 73,146, 36,
     73,146, 36, 73, 19,
    // Padding to handle unaligned word reads.
      0,
];

/// Get the WhiteSpace attribute for a Unicode code-point.
///
/// # Arguments
///  - `code_point` A code-point in the form of a rust `char`.
///
/// # Returns
/// bool value
#[must_use] pub const fn get_white_space(code_point: char) -> bool
{
    const INDEX_MASK : usize = (1 << WHITE_SPACE_INDEX_BITS) - 1;
    const COLUMN_MASK : usize = 1;

    let code_point_value = code_point as usize;
    let code_point_lo = code_point_value % WHITE_SPACE_CHUNK_SIZE;
    let mut code_point_hi = code_point_value / WHITE_SPACE_CHUNK_SIZE;
    if code_point_hi > WHITE_SPACE_INDEX_LEN - 1 {
        code_point_hi = WHITE_SPACE_INDEX_LEN - 1;
    }

    let index_offset = code_point_hi * WHITE_SPACE_INDEX_BITS;
    let index_byte_offset = index_offset / 8;
    let index_bit_offset = index_offset % 8;
    let mut index: usize = 0;
    index |= (WHITE_SPACE_DATA[WHITE_SPACE_INDEX_BYTE_OFFSET + index_byte_offset + 1] as usize) << 8;
    index |= (WHITE_SPACE_DATA[WHITE_SPACE_INDEX_BYTE_OFFSET + index_byte_offset + 0] as usize) << 0;
    index >>= index_bit_offset;
    index &= INDEX_MASK;

    let column_offset = (index * WHITE_SPACE_CHUNK_SIZE + code_point_lo) * WHITE_SPACE_COLUMN_BITS;
    let column_byte_offset = column_offset / 8;
    let column_bit_offset = column_offset % 8;

    let mut value: usize = 0;
    value |= (WHITE_SPACE_DATA[column_byte_offset + 0] as usize) << 0;
    value >>= column_bit_offset;
    value &= COLUMN_MASK;

    return match value {
        0 => false,
        _ => true,
    };
}

