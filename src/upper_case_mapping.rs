// This file was generated by the cargo-build script.

const UPPER_CASE_MAPPING_CHUNK_SIZE : usize = 512;
const UPPER_CASE_MAPPING_COLUMN_BITS : usize = 0;
const UPPER_CASE_MAPPING_INDEX_LEN : usize = 1;
const UPPER_CASE_MAPPING_INDEX_BITS : usize = 0;

const UPPER_CASE_MAPPING_INDEX_BYTE_OFFSET : usize = 64;

const UPPER_CASE_MAPPING_DATA: [u8; 64] = [
    // Column table
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    // Index table
    // Padding to handle unaligned word reads.
    
];

/// Get the UpperCaseMapping attribute for a Unicode code-point.
///
/// # Arguments
///  - `code_point` A code-point in the form of a rust `char`.
///
/// # Returns
/// bool value
#[must_use] pub const fn get_upper_case_mapping(code_point: char) -> Optional<char>
{
    const INDEX_MASK : usize = (1 << UPPER_CASE_MAPPING_INDEX_BITS) - 1;
    const COLUMN_MASK : usize = (1 << UPPER_CASE_MAPPING_COLUMN_BITS) - 1;

    let code_point_value = code_point as usize;
    let code_point_lo = code_point_value % UPPER_CASE_MAPPING_CHUNK_SIZE;
    let mut code_point_hi = code_point_value / UPPER_CASE_MAPPING_CHUNK_SIZE;
    if code_point_hi > UPPER_CASE_MAPPING_INDEX_LEN - 1 {
        code_point_hi = UPPER_CASE_MAPPING_INDEX_LEN - 1;
    }

    let index_offset = code_point_hi * UPPER_CASE_MAPPING_INDEX_BITS;
    let index_byte_offset = index_offset / 8;
    let index_bit_offset = index_offset % 8;
    let mut index: usize = 0;
    index |= (UPPER_CASE_MAPPING_DATA[UPPER_CASE_MAPPING_INDEX_BYTE_OFFSET + index_byte_offset + 0] as usize) << 0;
    index >>= index_bit_offset;
    index &= INDEX_MASK;

    let column_offset = (index * UPPER_CASE_MAPPING_CHUNK_SIZE + code_point_lo) * UPPER_CASE_MAPPING_COLUMN_BITS;
    let column_byte_offset = column_offset / 8;
    let column_bit_offset = column_offset % 8;

    let mut value: usize = 0;
    value |= (UPPER_CASE_MAPPING_DATA[column_byte_offset + 0] as usize) << 0;
    value >>= column_bit_offset;
    value &= COLUMN_MASK;

    return match value {
        0 => None,
        _ => char::from_u32(value as u32),
    };
}

#[cfg(all(test, not(debug_assertions)))]
#[test]
fn upper_case_mapping_full_coverage()
{
    for c in '\u{0000}'..='\u{d7ff}' {
        let _ = get_upper_case_mapping(c);
    }
    for c in '\u{e000}'..='\u{10ffff}' {
        let _ = get_upper_case_mapping(c);
    }
}

