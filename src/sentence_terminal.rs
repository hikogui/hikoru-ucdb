// This file was generated by the cargo-build script.

const SENTENCE_TERMINAL_CHUNK_SIZE : usize = 128;
const SENTENCE_TERMINAL_COLUMN_BITS : usize = 1;
const SENTENCE_TERMINAL_INDEX_LEN : usize = 951;
const SENTENCE_TERMINAL_INDEX_BITS : usize = 6;

const SENTENCE_TERMINAL_INDEX_BYTE_OFFSET : usize = 944;

const SENTENCE_TERMINAL_DATA: [u8; 1659] = [
    // Column table
      0,  0,  0,  0,  2, 64,  0,128,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,224,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,128, 98,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 48,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 12,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,132,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64,  0,  0,
      0,  0,  0,  0,  0,  0, 96,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 48,  0,  0,  0,  0,  0,
      8,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 48,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0, 15,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,192,  0,204,  0,  0,  0,224,
      0,  0,  0,  0,  0,  0,  0, 24,  0,  0,  0,  0,  0,  0,  0,192,  0,  0,  0,  0, 16,  0,  0, 48,128,  3,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 14,  0,  0,  0,  0,  0, 64,  0, 16,  0,  0, 24,  0,  0,  0,  0,  0,
      4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,128,
      0,192,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,136,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,192,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,192,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,128,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,224,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8,  0,  0,  0,  0,100,  0,  0,  0,  0,  0,  0,  0,196,  0,  0,  0,  0,  0,
      2, 64,  0,128,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,192,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,224,  3,  0,  0,  0,  0,192,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,128,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,192,  3,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0, 14,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 96, 32,  0,192,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0, 27,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0, 24,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 12,254,255,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,112,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0, 80,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 12,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0, 24,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,128,  1,
      0,  0,  0,  0,  0,  0,  0,  0, 24,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,192,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 32,  0,  0,  0,  0,  0,  0,  0,128,  1, 16,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,128,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    // Index table
     64, 16,  4, 65, 16,  4, 65, 16,  8,  3, 81, 24, 71,128,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 73, 16,  4, 65,160,  4, 65, 16,
      4, 75,192, 52, 78,240,  4,  1, 20,  5, 82, 16,  4, 65, 16,  4, 83, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65,
     16,  4,  1, 21,  4, 85, 16,  4, 86, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4,
     65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,
      4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65,
     16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4,
     65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,
      4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4,193, 21,  4, 88, 22,  4,218,198,117,222,
     23,128, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4,
     65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,
      4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65,
     16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 97, 32,  6,
     65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 99, 16,  4, 65, 16,  4, 65, 64,150,230,137,166,234, 26, 52,108, 16,
    180,110,240,  6, 65,  0,  7,177, 28,  4,110, 16,  4,193, 76,  7, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65,
     16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4,
     65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,
      4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4,181,
    125,  7, 65, 80,  7,  1, 30,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4,
     65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,
      4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65,
     16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 30,  4, 65, 16,  4,
     65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,  4, 65, 16,
      4, 65, 16,  4, 65, 16,  4,129, 30,  0,
    // Padding to handle unaligned word reads.
      0,
];

/// Get the SentenceTerminal attribute for a Unicode code-point.
///
/// # Arguments
///  - `code_point` A code-point in the form of a rust `char`.
///
/// # Returns
/// bool value
#[must_use] pub const fn get_sentence_terminal(code_point: char) -> bool
{
    const INDEX_MASK : usize = (1 << SENTENCE_TERMINAL_INDEX_BITS) - 1;
    const COLUMN_MASK : usize = 1;

    let code_point_value = code_point as usize;
    let code_point_lo = code_point_value % SENTENCE_TERMINAL_CHUNK_SIZE;
    let mut code_point_hi = code_point_value / SENTENCE_TERMINAL_CHUNK_SIZE;
    if code_point_hi > SENTENCE_TERMINAL_INDEX_LEN - 1 {
        code_point_hi = SENTENCE_TERMINAL_INDEX_LEN - 1;
    }

    let index_offset = code_point_hi * SENTENCE_TERMINAL_INDEX_BITS;
    let index_byte_offset = index_offset / 8;
    let index_bit_offset = index_offset % 8;
    let mut index: usize = 0;
    index |= (SENTENCE_TERMINAL_DATA[SENTENCE_TERMINAL_INDEX_BYTE_OFFSET + index_byte_offset + 1] as usize) << 8;
    index |= (SENTENCE_TERMINAL_DATA[SENTENCE_TERMINAL_INDEX_BYTE_OFFSET + index_byte_offset + 0] as usize) << 0;
    index >>= index_bit_offset;
    index &= INDEX_MASK;

    let column_offset = (index * SENTENCE_TERMINAL_CHUNK_SIZE + code_point_lo) * SENTENCE_TERMINAL_COLUMN_BITS;
    let column_byte_offset = column_offset / 8;
    let column_bit_offset = column_offset % 8;

    let mut value: usize = 0;
    value |= (SENTENCE_TERMINAL_DATA[column_byte_offset + 0] as usize) << 0;
    value >>= column_bit_offset;
    value &= COLUMN_MASK;

    return match value {
        0 => false,
        _ => true,
    };
}

#[cfg(all(test, not(debug_assertions)))]
#[test]
fn sentence_terminal_full_coverage()
{
    for c in '\u{0000}'..='\u{d7ff}' {
        let _ = get_sentence_terminal(c);
    }
    for c in '\u{e000}'..='\u{10ffff}' {
        let _ = get_sentence_terminal(c);
    }
}

