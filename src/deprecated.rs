// This file was generated by the cargo-build script.

const DEPRECATED_CHUNK_SIZE : usize = 512;
const DEPRECATED_COLUMN_BITS : usize = 1;
const DEPRECATED_INDEX_LEN : usize = 1794;
const DEPRECATED_INDEX_BITS : usize = 3;

const DEPRECATED_INDEX_BYTE_OFFSET : usize = 512;

const DEPRECATED_DATA: [u8; 1186] = [
    // Column table
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,128,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 24,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,252,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    // Index table
     72,148,100, 73,152, 36,117,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146,
     36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,
    146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36,
     73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146,
     36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,
    146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36,
     73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146,
     36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,
    146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36,
     73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146,
     36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,
    146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36,
     73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146,
     36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,
    146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36,
     73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146,
     36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,
    146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36,
     73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146,
     36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,
    146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36, 73,146, 36,
     15,
    // Padding to handle unaligned word reads.
      0,
];

/// Get the Deprecated attribute for a Unicode code-point.
///
/// # Arguments
///  - `code_point` A code-point in the form of a rust `char`.
///
/// # Returns
/// bool value
#[must_use] pub const fn get_deprecated(code_point: char) -> bool
{
    const INDEX_MASK : usize = (1 << DEPRECATED_INDEX_BITS) - 1;
    const COLUMN_MASK : usize = 1;

    let code_point_value = code_point as usize;
    let code_point_lo = code_point_value % DEPRECATED_CHUNK_SIZE;
    let mut code_point_hi = code_point_value / DEPRECATED_CHUNK_SIZE;
    if code_point_hi > DEPRECATED_INDEX_LEN - 1 {
        code_point_hi = DEPRECATED_INDEX_LEN - 1;
    }

    let index_offset = code_point_hi * DEPRECATED_INDEX_BITS;
    let index_byte_offset = index_offset / 8;
    let index_bit_offset = index_offset % 8;
    let mut index: usize = 0;
    index |= (DEPRECATED_DATA[DEPRECATED_INDEX_BYTE_OFFSET + index_byte_offset + 1] as usize) << 8;
    index |= (DEPRECATED_DATA[DEPRECATED_INDEX_BYTE_OFFSET + index_byte_offset + 0] as usize) << 0;
    index >>= index_bit_offset;
    index &= INDEX_MASK;

    let column_offset = (index * DEPRECATED_CHUNK_SIZE + code_point_lo) * DEPRECATED_COLUMN_BITS;
    let column_byte_offset = column_offset / 8;
    let column_bit_offset = column_offset % 8;

    let mut value: usize = 0;
    value |= (DEPRECATED_DATA[column_byte_offset + 0] as usize) << 0;
    value >>= column_bit_offset;
    value &= COLUMN_MASK;

    return match value {
        0 => false,
        _ => true,
    };
}

