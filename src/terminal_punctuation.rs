// This file was generated by the cargo-build script.

const TERMINAL_PUNCTUATION_CHUNK_SIZE : usize = 128;
const TERMINAL_PUNCTUATION_COLUMN_BITS : usize = 1;
const TERMINAL_PUNCTUATION_INDEX_LEN : usize = 951;
const TERMINAL_PUNCTUATION_INDEX_BITS : usize = 7;

const TERMINAL_PUNCTUATION_INDEX_BYTE_OFFSET : usize = 1152;

const TERMINAL_PUNCTUATION_DATA: [u8; 1986] = [
    // Column table
      0,  0,  0,  0,  2, 80,  0,140,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64,128,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  2,  0,  0,  0,  0,  0,  0,  8,  0,  0,  0,  0,  0,  0,  0,  0, 16,  0,232,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0,255, 23,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,191,127,  0,  0,  0, 64,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 48,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 12,  0,  0,  0,  0,
      0,225,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 12,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,254,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 56,  0,  0,  0,  0,  0,  0,  0,  0, 96,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,112,  4,  0,  0,  0,  0, 60,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0, 48,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 15,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,192,  0,236,  0,  0,  0,224,  0,  0,  0,  0,  0,  0,  0,248,  0,  0,  0,  0,  0,  0,  0,192,
      0,  0,  0,  0, 16,  0,  0, 48,128,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 14,
      0,  0,  0,  0,  0, 64,  0, 16,  2,208, 24,  0,  0,  0,  0,  0,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,192,  0,224,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,248,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,192,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,192,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,128,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,128,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,224,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,128,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8,  0,  0,
      0,  0,100,  0,  0,  0,  0,  0,  0,  0,247,  0,  0,  0,  0,  0,  2, 80,  0,140,  0,  0,  0,  0,  0,  0,  0,  0, 18,  0,  0,  0,
      0,  0,  0,128,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,128,  0,  0,  0,  0,  0,
      0,  0,  0,128,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,192,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 63,  0,  0,  0,  0,  0,  0,  0,  0,252,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0, 30,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,224,  3,  0,  0,  0,  0,
    192,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,128, 63,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,192,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 14,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0, 96, 32,  0,192,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 31,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 48,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0, 56,  0, 12,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 60,254,255,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,112,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0, 80,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 12,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0, 24,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 14,  0,  0,  0,  0,  0,  2,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,128,  1,  0,  0,  0,  0,  0,  0,  0,  0, 24,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 31,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,192,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 32,  0,  0,  0,  0,  0,  0,  0,128,  3, 16,  0,  0,  0,  0,  0,  0,  0,
      0,  0,128,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,128,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    // Index table
    128, 64, 32, 16,  8,  8,  6,129, 64,128, 80, 48, 28, 16,137,128, 34, 16,  8,  4,  2,129, 64, 32,176,  8, 48,  2,141, 64, 32, 16,
      8, 56,  2,129, 64, 32,240,128, 68, 36,147,  0, 37, 16,168, 88,  2,151, 64, 32, 16,  8,  4,  2,152, 64, 32, 16,  8,  4,  2,129,
     64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 76, 32,160,  9,  4,  2,155, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,
      4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64,
     32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,
      2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32,
     16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,
    129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,
      8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,  1,
     78, 32,208,241,  4,  2, 31, 80, 72, 52, 34,  5, 74,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,
      4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64,
     32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,
      2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32,
     16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 96, 10,156,  2,
    129, 64, 32, 16,  8,  4, 80,129, 64, 32, 16,  8,  4,  2,169,128, 42,176, 98,181, 92,129, 64, 32, 16,  8,188, 96, 49,217,140, 86,
    179,  5,110,184, 64, 32,167, 11,236,  2,129,  0, 47,208,243,  5,  2,191, 64, 32, 16,  0,  6,  3,129, 64, 32, 16,  8,  4,  2,194,
     64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,
      4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64,
     32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,
      2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 48, 36, 22,  3,129,192, 48,
     16, 48,  6,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,
    129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,
      8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129,
     64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,
      4,  2,129, 64, 32, 16,  8,  4,  2,  1, 85, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64,
     32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16, 56,  6,
      0,
    // Padding to handle unaligned word reads.
      0,
];

/// Get the TerminalPunctuation attribute for a Unicode code-point.
///
/// # Arguments
///  - `code_point` A code-point in the form of a rust `char`.
///
/// # Returns
/// bool value
#[must_use] pub const fn get_terminal_punctuation(code_point: char) -> bool
{
    const INDEX_MASK : usize = (1 << TERMINAL_PUNCTUATION_INDEX_BITS) - 1;
    const COLUMN_MASK : usize = 1;

    let code_point_value = code_point as usize;
    let code_point_lo = code_point_value % TERMINAL_PUNCTUATION_CHUNK_SIZE;
    let mut code_point_hi = code_point_value / TERMINAL_PUNCTUATION_CHUNK_SIZE;
    if code_point_hi > TERMINAL_PUNCTUATION_INDEX_LEN - 1 {
        code_point_hi = TERMINAL_PUNCTUATION_INDEX_LEN - 1;
    }

    let index_offset = code_point_hi * TERMINAL_PUNCTUATION_INDEX_BITS;
    let index_byte_offset = index_offset / 8;
    let index_bit_offset = index_offset % 8;
    let mut index: usize = 0;
    index |= (TERMINAL_PUNCTUATION_DATA[TERMINAL_PUNCTUATION_INDEX_BYTE_OFFSET + index_byte_offset + 1] as usize) << 8;
    index |= (TERMINAL_PUNCTUATION_DATA[TERMINAL_PUNCTUATION_INDEX_BYTE_OFFSET + index_byte_offset + 0] as usize) << 0;
    index >>= index_bit_offset;
    index &= INDEX_MASK;

    let column_offset = (index * TERMINAL_PUNCTUATION_CHUNK_SIZE + code_point_lo) * TERMINAL_PUNCTUATION_COLUMN_BITS;
    let column_byte_offset = column_offset / 8;
    let column_bit_offset = column_offset % 8;

    let mut value: usize = 0;
    value |= (TERMINAL_PUNCTUATION_DATA[column_byte_offset + 0] as usize) << 0;
    value >>= column_bit_offset;
    value &= COLUMN_MASK;

    return match value {
        0 => false,
        _ => true,
    };
}

#[cfg(all(test, not(debug_assertions)))]
#[test]
fn terminal_punctuation_full_coverage()
{
    for c in '\u{0000}'..='\u{d7ff}' {
        let _ = get_terminal_punctuation(c);
    }
    for c in '\u{e000}'..='\u{10ffff}' {
        let _ = get_terminal_punctuation(c);
    }
}

