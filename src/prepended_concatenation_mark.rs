// This file was generated by the cargo-build script.

const PREPENDED_CONCATENATION_MARK_CHUNK_SIZE : usize = 256;
const PREPENDED_CONCATENATION_MARK_COLUMN_BITS : usize = 1;
const PREPENDED_CONCATENATION_MARK_INDEX_LEN : usize = 274;
const PREPENDED_CONCATENATION_MARK_INDEX_BITS : usize = 3;

const PREPENDED_CONCATENATION_MARK_INDEX_BYTE_OFFSET : usize = 160;

const PREPENDED_CONCATENATION_MARK_DATA: [u8; 264] = [
    // Column table
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     63,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 32,  0,  0,  0,  0,
      0,128,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 32,  0, 32,  0,  0,  0,  0,  0,  0,
    // Index table
      0,  0, 68,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  4,
    // Padding to handle unaligned word reads.
      0,
];

/// Get the PrependedConcatenationMark attribute for a Unicode code-point.
///
/// # Arguments
///  - `code_point` A code-point in the form of a rust `char`.
///
/// # Returns
/// bool value
#[must_use] pub const fn get_prepended_concatenation_mark(code_point: char) -> bool
{
    const INDEX_MASK : usize = (1 << PREPENDED_CONCATENATION_MARK_INDEX_BITS) - 1;
    const COLUMN_MASK : usize = 1;

    let code_point_value = code_point as usize;
    let code_point_lo = code_point_value % PREPENDED_CONCATENATION_MARK_CHUNK_SIZE;
    let mut code_point_hi = code_point_value / PREPENDED_CONCATENATION_MARK_CHUNK_SIZE;
    if code_point_hi > PREPENDED_CONCATENATION_MARK_INDEX_LEN - 1 {
        code_point_hi = PREPENDED_CONCATENATION_MARK_INDEX_LEN - 1;
    }

    let index_offset = code_point_hi * PREPENDED_CONCATENATION_MARK_INDEX_BITS;
    let index_byte_offset = index_offset / 8;
    let index_bit_offset = index_offset % 8;
    let mut index: usize = 0;
    index |= (PREPENDED_CONCATENATION_MARK_DATA[PREPENDED_CONCATENATION_MARK_INDEX_BYTE_OFFSET + index_byte_offset + 1] as usize) << 8;
    index |= (PREPENDED_CONCATENATION_MARK_DATA[PREPENDED_CONCATENATION_MARK_INDEX_BYTE_OFFSET + index_byte_offset + 0] as usize) << 0;
    index >>= index_bit_offset;
    index &= INDEX_MASK;

    let column_offset = (index * PREPENDED_CONCATENATION_MARK_CHUNK_SIZE + code_point_lo) * PREPENDED_CONCATENATION_MARK_COLUMN_BITS;
    let column_byte_offset = column_offset / 8;
    let column_bit_offset = column_offset % 8;

    let mut value: usize = 0;
    value |= (PREPENDED_CONCATENATION_MARK_DATA[column_byte_offset + 0] as usize) << 0;
    value >>= column_bit_offset;
    value &= COLUMN_MASK;

    return match value {
        0 => false,
        _ => true,
    };
}

#[cfg(all(test, not(debug_assertions)))]
#[test]
fn prepended_concatenation_mark_full_coverage()
{
    for c in '\u{0000}'..='\u{d7ff}' {
        let _ = get_prepended_concatenation_mark(c);
    }
    for c in '\u{e000}'..='\u{10ffff}' {
        let _ = get_prepended_concatenation_mark(c);
    }
}

