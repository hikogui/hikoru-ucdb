// This file was generated by the cargo-build script.

const TITLE_CASE_MAPPING_CHUNK_SIZE : usize = 64;
const TITLE_CASE_MAPPING_COLUMN_BITS : usize = 17;
const TITLE_CASE_MAPPING_INDEX_LEN : usize = 1958;
const TITLE_CASE_MAPPING_INDEX_BITS : usize = 6;

const TITLE_CASE_MAPPING_INDEX_BYTE_OFFSET : usize = 456;

const TITLE_CASE_MAPPING_DATA: [u8; 1926] = [
    // Column table
      0,  0,  0,  0,  0,  0,  0,  0,250,255,255,255,  1,  0,  0,  0,250,255,255,255, 63,  0,  0,  0,221,253,223,253,255,255,255,255,
    239,254,223,253,255,255,255,255,255,255,127,255,255,255,255,255,251,253,255,255,255,255,255,255,255,255,255,255,255,255,255,254,
    255,255,191,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,253,223,249,255,255,255,255,255, 31,  0,  0,128,235,253,255,255,255,255,
    255,255,255,255,255,255,255,  3,  0,  0,  0,  0,253,255,255,255,223,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
    255,253,223,253,255,255,255,255,255,255,255,255,  1,  0,  0,  0,  0,  0,  0,  0,250,255,255,255,255,255,183,  5,  0,  0,  0,  0,
      0,  0,  0,  0,250,255,255,255,255,255,255,255,255,255,255,255,  3, 20,251,255,255,255,255,255,255,255,255,255,255,255,255,255,
    255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,251,255,255,
    255,255,255,187,255,255,255, 15,  0,250,255,255,255,255,255,255,255,255,255,251,255,250,255,251,255,  1,  0,  0, 64,254, 63,133,
      0,  0,  0,  0,250,255,255, 31, 32, 12,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,128,254,255,255,255, 31,  0,  0,  0,  0,
    250,255,255,255,255,255,255, 31,  0,  0,  0,  0,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,183,
    221,255,255,255,255,255,255, 10,221,255,255,255,191,  2,  0,  0,  0,  0,  0,  0,220,255,255,255,255,255,255,255,255,255,255,255,
    255,255,255,255,255,255,255,255,255,255,255,255,191,  2,192,254, 20,  0,  0,  0,250,255,255,255,255,255,255,255,255,255,255,  0,
      0,  0,  0,  0,  0,  0,250,255,255,255,255,255, 15,  0,  0,  0,  0,  0,  0,  0,  0,  0,247,255,255,255,255,255, 55,  0,  0,  0,
    250,255,255,255,255,255,255,255,  7,  0,250,255,255,255, 63,  0,  0,  0,  0,  0,250,255,255,255,255,255,255,255,255,255,  0,  0,
    254,255,255,255,255,255,  3,  0,
    // Index table
     64,  0,  8,  3, 81, 24,  7,  2,  0, 64,162, 44, 76,227, 60, 80,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 32, 77,  0,  0,  0,  0,  0,  0,  0, 64, 85,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 96,  1,  0,  0,  0, 23,150,105, 27,215,121,
      0,  0,  0, 31, 24,  2,  0,  0,  0,  0,  0,  0,  0, 32,142,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,100,105,158,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,154,  2,234,202,182,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 46,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 47,  0,199,128, 60,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0, 64,  3, 64, 13,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0, 96,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,192, 13,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 56,  0,
    // Padding to handle unaligned word reads.
      0,
];

/// Get the TitleCaseMapping attribute for a Unicode code-point.
///
/// # Arguments
///  - `code_point` A code-point in the form of a rust `char`.
///
/// # Returns
/// bool value
#[must_use] pub const fn get_title_case_mapping(code_point: char) -> Optional<char>
{
    const INDEX_MASK : usize = (1 << TITLE_CASE_MAPPING_INDEX_BITS) - 1;
    const COLUMN_MASK : usize = (1 << TITLE_CASE_MAPPING_COLUMN_BITS) - 1;

    let code_point_value = code_point as usize;
    let code_point_lo = code_point_value % TITLE_CASE_MAPPING_CHUNK_SIZE;
    let mut code_point_hi = code_point_value / TITLE_CASE_MAPPING_CHUNK_SIZE;
    if code_point_hi > TITLE_CASE_MAPPING_INDEX_LEN - 1 {
        code_point_hi = TITLE_CASE_MAPPING_INDEX_LEN - 1;
    }

    let index_offset = code_point_hi * TITLE_CASE_MAPPING_INDEX_BITS;
    let index_byte_offset = index_offset / 8;
    let index_bit_offset = index_offset % 8;
    let mut index: usize = 0;
    index |= (TITLE_CASE_MAPPING_DATA[TITLE_CASE_MAPPING_INDEX_BYTE_OFFSET + index_byte_offset + 1] as usize) << 8;
    index |= (TITLE_CASE_MAPPING_DATA[TITLE_CASE_MAPPING_INDEX_BYTE_OFFSET + index_byte_offset + 0] as usize) << 0;
    index >>= index_bit_offset;
    index &= INDEX_MASK;

    let column_offset = (index * TITLE_CASE_MAPPING_CHUNK_SIZE + code_point_lo) * TITLE_CASE_MAPPING_COLUMN_BITS;
    let column_byte_offset = column_offset / 8;
    let column_bit_offset = column_offset % 8;

    let mut value: usize = 0;
    value |= (TITLE_CASE_MAPPING_DATA[column_byte_offset + 3] as usize) << 24;
    value |= (TITLE_CASE_MAPPING_DATA[column_byte_offset + 2] as usize) << 16;
    value |= (TITLE_CASE_MAPPING_DATA[column_byte_offset + 1] as usize) << 8;
    value |= (TITLE_CASE_MAPPING_DATA[column_byte_offset + 0] as usize) << 0;
    value >>= column_bit_offset;
    value &= COLUMN_MASK;

    return match value {
        0 => None,
        _ => char::from_u32(value as u32),
    };
}

#[cfg(all(test, not(debug_assertions)))]
#[test]
fn title_case_mapping_full_coverage()
{
    for c in '\u{0000}'..='\u{d7ff}' {
        let _ = get_title_case_mapping(c);
    }
    for c in '\u{e000}'..='\u{10ffff}' {
        let _ = get_title_case_mapping(c);
    }
}

