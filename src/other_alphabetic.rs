// This file was generated by the cargo-build script.

const OTHER_ALPHABETIC_CHUNK_SIZE : usize = 256;
const OTHER_ALPHABETIC_COLUMN_BITS : usize = 1;
const OTHER_ALPHABETIC_INDEX_LEN : usize = 499;
const OTHER_ALPHABETIC_INDEX_BITS : usize = 6;

const OTHER_ALPHABETIC_INDEX_BYTE_OFFSET : usize = 1728;

const OTHER_ALPHABETIC_DATA: [u8; 2104] = [
    // Column table
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0, 32,  0,  0,  0,248,255,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,255,191,182,  0,  0,  0,  0,  0,  0,  0,
      0,  0,255,  7,  0,  0,  0,  0,  0,248,255,254,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,192, 31,158, 33,  0,  0,
      0,  0,  2,  0,  0,  0,255,255,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,192,255,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,192,248,239, 30,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,128,  0,  0,  0,  0,  0,  0,  0,240,255,248,  3,255,255,
     15,  0,  0,  0,  0,  0,  0,204,255,223,224,  0, 12,  0,  0,  0, 14,  0,  0,  0,  0,  0,  0,192,159, 25,128,  0, 12,  0,  0,  0,
     14,  0,  0,  0,  0,  0,  0,192,135, 25,  2,  0,  0,  0, 35,  0, 14,  0,  0,  0,  0,  0,  0,192,191, 27,  0,  0, 12,  0,  0, 28,
     14,  0,  0,  0,  0,  0,  0,192,159, 25,192,  0, 12,  0,  0,  0,  4,  0,  0,  0,  0,  0,  0,192,199, 29,128,  0,  0,  0,  0,  0,
     31,  0,  0,  0,  0,  0,  0,192,223, 29, 96,  0, 12,  0,  0,  0, 14,  0,  0,  0,  0,  0,  0,192,223, 29, 96,  0, 12,  0,  8,  0,
     15,  0,  0,  0,  0,  0,  0,192,223, 29,128,  0, 12,  0,  0,  0, 14,  0,  0,  0,  0,  0,  0,  0,  0,128, 95,255,  0,  0, 12,  0,
      0,  0,  0,  0,  0,  0,242,  7,  0, 32,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,242, 27,  0, 32,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,254,255, 15,224,255,254,255,255,255, 31,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,248,127,121,  0,  0,192,195,157, 63, 30,  0,252,191,  0, 60,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0, 12,  0,  0,  0, 12,  0,  0,  0, 12,  0,  0,  0, 12,  0,  0,  0,  0,  0,  0,  0,192,255,255,  1,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 96,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,255, 15,255,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,128, 15,  0,  0,  0,  0,  0,  0,224,127,254,255, 31,  0,  0,  0,  0,  0,  0,  0,  0,128,  1,112,  0,  0,  0,  0,  0,  0,
     31,  0,  0,  0,  0,  0,224,255, 15,  0,  0,  0,  0,  0,  0,  0,  7,  0,  0,  0,254, 51,  0,  0,  0,  0,  0,  0,128,255,  3,  0,
      0,  0,  0,  0,240,255,127,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,248,255,255,255, 31,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,192,255,255,255,255,255,255,  3,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,255,255,255,255,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,240, 15,  0,  0,  0,192,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      4,  8,  0,  0,248,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,240,255, 47,  0,  0,  0,  0,  0,  0,128,
      0,  0,  0,  0,192,  7,  0,  0,128,255,  7,  0,  0,  0,  0,  0, 15,  0,  0,  0,  0,  0,240,255,  0,  0,  0,  0, 32,  0,  0,  0,
      0,  0,  0,  0,  0,254,127,  0,  8, 48,  0,  0,  0,  0,  0, 56,  0,  0,  0,  0,  0,  0,157, 65,  0,  0,  0,  0,  0,248, 32,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,248,  7,  0,  0,
      0,  0,  0, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,192,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    110,240,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,240,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 24,  0,  0,  0,  0,  0,  0,  0,  0,  0, 16,
      7,  0,  0,  0,  0,  0,  0,255, 63,  0,  0,  0,  0,  0, 24,  0,  7,  0,  0,  0,  0,  0,255,  1,  4,  0,  0,  0,  0,  0,  0,  0,
      7,  0,  0,  0,128,255,  7,  0, 96,  0,  0,  0,  0,  0,  0,  0,  7,  0,  0,  0,  0,  0,248,255,  0,192,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,240,159, 64,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,128,255,  1,  0,  0,
     15,  0,  0,  0,  0,  0,  0,192,159, 25,128,  0, 12,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,255,165, 55,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,224,255, 59,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,255,255,  3,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,128, 63,127,  0,  0,  0, 48,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,255,127,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,248, 63,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,224,255,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,240,255,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,191, 25,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,254,252, 16,  0,  0,  0,
    254,  7,  0,  0,  0,  0,224,123,  0,  0,254, 15,  0,  0,  0,  0,  0,252,255,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,128,127,127,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,252,255,255,254,127,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,126,180,139,  0,  0,  0,  0,  0,  0,  0,  0,124,123,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,120,  0,
     11,  0,  0,  0,  0,  0,240,199,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,192,255,127,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,128,254,255,255,255,255,255,255,128,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    127,255,255,249,219,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,128,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,128,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,255,255,255,  3,255,255,255,  3,255,255,255,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    // Index table
      0,  0,  4,128, 48, 16,133,113, 32,137,178, 48, 13,  0,  0,  0,  0, 56, 15, 20, 73, 19,  5,  0,  0,  0,  0, 21,  0,  0,  0,  0,
      0,128,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,112,  1, 88,166,
    109,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,112,  0,  0,  0,
      0,  0,116,  0,  0,  0,  0,224,  1,192,  7,  2,161, 56,146,165,121,162,169,186,  2,108,235,190,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0, 12,  0,  0,  0,  0,  0,  0,  0,  0,  0,196,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 50,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0, 51,  0,  0,  0,  0,  0,  0, 13,  0,  0,  0,  0, 64, 13,  0,
    // Padding to handle unaligned word reads.
      0,
];

/// Get the OtherAlphabetic attribute for a Unicode code-point.
///
/// # Arguments
///  - `code_point` A code-point in the form of a rust `char`.
///
/// # Returns
/// bool value
#[must_use] pub const fn get_other_alphabetic(code_point: char) -> bool
{
    const INDEX_MASK : usize = (1 << OTHER_ALPHABETIC_INDEX_BITS) - 1;
    const COLUMN_MASK : usize = 1;

    let code_point_value = code_point as usize;
    let code_point_lo = code_point_value % OTHER_ALPHABETIC_CHUNK_SIZE;
    let mut code_point_hi = code_point_value / OTHER_ALPHABETIC_CHUNK_SIZE;
    if code_point_hi > OTHER_ALPHABETIC_INDEX_LEN - 1 {
        code_point_hi = OTHER_ALPHABETIC_INDEX_LEN - 1;
    }

    let index_offset = code_point_hi * OTHER_ALPHABETIC_INDEX_BITS;
    let index_byte_offset = index_offset / 8;
    let index_bit_offset = index_offset % 8;
    let mut index: usize = 0;
    index |= (OTHER_ALPHABETIC_DATA[OTHER_ALPHABETIC_INDEX_BYTE_OFFSET + index_byte_offset + 1] as usize) << 8;
    index |= (OTHER_ALPHABETIC_DATA[OTHER_ALPHABETIC_INDEX_BYTE_OFFSET + index_byte_offset + 0] as usize) << 0;
    index >>= index_bit_offset;
    index &= INDEX_MASK;

    let column_offset = (index * OTHER_ALPHABETIC_CHUNK_SIZE + code_point_lo) * OTHER_ALPHABETIC_COLUMN_BITS;
    let column_byte_offset = column_offset / 8;
    let column_bit_offset = column_offset % 8;

    let mut value: usize = 0;
    value |= (OTHER_ALPHABETIC_DATA[column_byte_offset + 0] as usize) << 0;
    value >>= column_bit_offset;
    value &= COLUMN_MASK;

    return match value {
        0 => false,
        _ => true,
    };
}

