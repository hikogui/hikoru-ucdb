// This file was generated by the cargo-build script.

const IDEOGRAPHIC_CHUNK_SIZE : usize = 256;
const IDEOGRAPHIC_COLUMN_BITS : usize = 1;
const IDEOGRAPHIC_INDEX_LEN : usize = 805;
const IDEOGRAPHIC_INDEX_BITS : usize = 5;

const IDEOGRAPHIC_INDEX_BYTE_OFFSET : usize = 640;

const IDEOGRAPHIC_DATA: [u8; 1145] = [
    // Column table
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    192,  0,  0,  0,254,  3,  0,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
    255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  0,  0,  0,  0,  0,  0,  0,  0,
    255,255,255,255,255,255,255,255,255,255,255,255,255, 63,255,255,255,255,255,255,255,255,255,255,255,255,255,  3,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 16,  0,  0,  0,
    255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  0,
    255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255, 63,  0,  0,  0,  0,128,
    255,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
    255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255, 15,
    255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  0,  0,  0,  0,
    255,255,255,255,255,255,255,  3,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
    255,255,255, 63,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
    255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  3,  0,255,255,255,255,255,255,255,255,255,255,
    255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  1,  0,255,255,
    255,255,255,255,255,255,255,255,255,255,255, 63,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    255,255,255, 63,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    255,255,255,255,255,255,255,255,255,  7,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
    255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    // Index table
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,
     32,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,134, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132,
     16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,
      8, 33,132, 16,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 16,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0, 40, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 48, 66,  8,113, 16,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 32, 41,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8,
     33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132,
     16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,
      8, 33,132, 16, 66,  8, 33,196, 18, 66,  8, 33,132, 16, 66,  8, 33,132, 96, 77,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,
    132, 19, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,136, 39,  4,  4,  0,  0,  0,  0,  0, 66, 68,  0,  0,  0,
     66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 41,132, 16, 66,  8, 33,132, 16, 66,136,  9,  0,
    // Padding to handle unaligned word reads.
      0,
];

/// Get the Ideographic attribute for a Unicode code-point.
///
/// # Arguments
///  - `code_point` A code-point in the form of a rust `char`.
///
/// # Returns
/// bool value
#[must_use] pub const fn get_ideographic(code_point: char) -> bool
{
    const INDEX_MASK : usize = (1 << IDEOGRAPHIC_INDEX_BITS) - 1;
    const COLUMN_MASK : usize = 1;

    let code_point_value = code_point as usize;
    let code_point_lo = code_point_value % IDEOGRAPHIC_CHUNK_SIZE;
    let mut code_point_hi = code_point_value / IDEOGRAPHIC_CHUNK_SIZE;
    if code_point_hi > IDEOGRAPHIC_INDEX_LEN - 1 {
        code_point_hi = IDEOGRAPHIC_INDEX_LEN - 1;
    }

    let index_offset = code_point_hi * IDEOGRAPHIC_INDEX_BITS;
    let index_byte_offset = index_offset / 8;
    let index_bit_offset = index_offset % 8;
    let mut index: usize = 0;
    index |= (IDEOGRAPHIC_DATA[IDEOGRAPHIC_INDEX_BYTE_OFFSET + index_byte_offset + 1] as usize) << 8;
    index |= (IDEOGRAPHIC_DATA[IDEOGRAPHIC_INDEX_BYTE_OFFSET + index_byte_offset + 0] as usize) << 0;
    index >>= index_bit_offset;
    index &= INDEX_MASK;

    let column_offset = (index * IDEOGRAPHIC_CHUNK_SIZE + code_point_lo) * IDEOGRAPHIC_COLUMN_BITS;
    let column_byte_offset = column_offset / 8;
    let column_bit_offset = column_offset % 8;

    let mut value: usize = 0;
    value |= (IDEOGRAPHIC_DATA[column_byte_offset + 0] as usize) << 0;
    value >>= column_bit_offset;
    value &= COLUMN_MASK;

    return match value {
        0 => false,
        _ => true,
    };
}

#[cfg(all(test, not(debug_assertions)))]
#[test]
fn ideographic_full_coverage()
{
    for c in '\u{0000}'..='\u{d7ff}' {
        let _ = get_ideographic(c);
    }
    for c in '\u{e000}'..='\u{10ffff}' {
        let _ = get_ideographic(c);
    }
}

