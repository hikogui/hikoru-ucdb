// This file was generated by the cargo-build script.

const SOFT_DOTTED_CHUNK_SIZE : usize = 256;
const SOFT_DOTTED_COLUMN_BITS : usize = 1;
const SOFT_DOTTED_INDEX_LEN : usize = 482;
const SOFT_DOTTED_INDEX_BITS : usize = 4;

const SOFT_DOTTED_INDEX_BYTE_OFFSET : usize = 512;

const SOFT_DOTTED_DATA: [u8; 754] = [
    // Column table
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,128,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  1,  0,  0,  0,  0,  0, 32,  0,  0,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  0,  0,  0,  0,  0, 64,  0, 16,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0, 32,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0, 12,  0,  0,  0,  0,  0,192,  0,  0,  0,  0,  0,  0, 12,  0,  0,  0,  0,  0,192,  0,  0,  0,  0,  0,  0, 12,  0,
      0,  0,  0,  0,192,  0,  0,  0,  0,  0,  0, 12,  0,  0,  0,  0,  0,192,  0,  0,  0,  0,  0,  0, 12,  0,  0,  0,  0,  0,192,  0,
      0,  0,  0,  0,  0, 12,  0,  0,  0,  0,  0,192,  0,  0,  0,  0,  0,  0, 12,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0, 48,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    // Index table
     16, 50, 84, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85,101, 87,152, 85, 85, 85, 85, 85, 90, 85, 85, 85, 85, 85, 85, 85, 85, 85,
     85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
     85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
     85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
     85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
     85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
     85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
     85, 85, 85, 85, 85, 85, 85, 85, 85, 85,203, 93, 85, 85, 85,229, 95,
    // Padding to handle unaligned word reads.
      0,
];

/// Get the SoftDotted attribute for a Unicode code-point.
///
/// # Arguments
///  - `code_point` A code-point in the form of a rust `char`.
///
/// # Returns
/// bool value
#[must_use] pub const fn get_soft_dotted(code_point: char) -> bool
{
    const INDEX_MASK : usize = (1 << SOFT_DOTTED_INDEX_BITS) - 1;
    const COLUMN_MASK : usize = 1;

    let code_point_value = code_point as usize;
    let code_point_lo = code_point_value % SOFT_DOTTED_CHUNK_SIZE;
    let mut code_point_hi = code_point_value / SOFT_DOTTED_CHUNK_SIZE;
    if code_point_hi > SOFT_DOTTED_INDEX_LEN - 1 {
        code_point_hi = SOFT_DOTTED_INDEX_LEN - 1;
    }

    let index_offset = code_point_hi * SOFT_DOTTED_INDEX_BITS;
    let index_byte_offset = index_offset / 8;
    let index_bit_offset = index_offset % 8;
    let mut index: usize = 0;
    index |= (SOFT_DOTTED_DATA[SOFT_DOTTED_INDEX_BYTE_OFFSET + index_byte_offset + 1] as usize) << 8;
    index |= (SOFT_DOTTED_DATA[SOFT_DOTTED_INDEX_BYTE_OFFSET + index_byte_offset + 0] as usize) << 0;
    index >>= index_bit_offset;
    index &= INDEX_MASK;

    let column_offset = (index * SOFT_DOTTED_CHUNK_SIZE + code_point_lo) * SOFT_DOTTED_COLUMN_BITS;
    let column_byte_offset = column_offset / 8;
    let column_bit_offset = column_offset % 8;

    let mut value: usize = 0;
    value |= (SOFT_DOTTED_DATA[column_byte_offset + 0] as usize) << 0;
    value >>= column_bit_offset;
    value &= COLUMN_MASK;

    return match value {
        0 => false,
        _ => true,
    };
}

#[cfg(all(test, not(debug_assertions)))]
#[test]
fn soft_dotted_full_coverage()
{
    for c in '\u{0000}'..='\u{d7ff}' {
        let _ = get_soft_dotted(c);
    }
    for c in '\u{e000}'..='\u{10ffff}' {
        let _ = get_soft_dotted(c);
    }
}

