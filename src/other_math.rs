// This file was generated by the cargo-build script.

const OTHER_MATH_CHUNK_SIZE : usize = 256;
const OTHER_MATH_COLUMN_BITS : usize = 1;
const OTHER_MATH_INDEX_LEN : usize = 496;
const OTHER_MATH_INDEX_BITS : usize = 5;

const OTHER_MATH_INDEX_BYTE_OFFSET : usize = 544;

const OTHER_MATH_DATA: [u8; 855] = [
    // Column table
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 39,  0,  0,  0, 51,  0,
      0,  0, 64,  0,  0,  0, 28,  0,  1,  0,  0,  0, 30,  0,  0, 96,  0, 96,  0,  0,  0,  0,  0,  0,  0,  0,255, 31, 98,248,  0,  0,
    132,252, 47, 62, 16,179,251,241,224,  3,  0,  0,  0,  0,  0,  0,  0,  0,224,243,182, 62,195,240,255, 63,235, 47, 48,  0,  0,  0,
      0, 15,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,176,  0,  0,  0,  1,  0,  4,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,192,127,240,193,140, 15,  0,148, 31,  0,  0,
     96,  0,  0,  0,  0,  0,  0,  0,  5,  0,  0,  0, 15, 96,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 96,  0,  0,  0,192,255,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,248,255,255,  1,  0,  0,  0,  0,  0,  0,  0, 15,  0,  0,  0, 48,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0, 80,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    255,255,255,255,255,255,255,255,255,255,223,255,255,255,255,255,255,255,255,223,100,222,255,235,239,255,255,255,255,255,255,255,
    191,231,223,223,255,255,255,123, 95,252,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
    255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255, 63,255,255,255,253,255,255,247,255,255,255,247,
    255,255,223,255,255,255,223,255,255,127,255,255,255,127,255,255,255,253,255,255,255,253,255,255,247,207,255,255,255,255,255,255,
    239,255,255,255,150,254,247, 10,132,234,150,170,150,247,247, 94,255,251,255, 15,238,251,255, 15,  0,  0,  0,  0,  0,  0,  0,  0,
    // Index table
     32,  4, 17, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8,131,132, 18,204, 65, 33,133, 16, 66,  8, 33,132,
     16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,
      8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,
    132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16,
     66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16,130, 90,
     33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132,
     16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,
      8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,
    132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16,
     66,  8, 33,132,192,154,123, 33,132, 16, 66,  8, 33,132, 16, 66,  8, 33,132, 16,  2, 12,
    // Padding to handle unaligned word reads.
      0,
];

/// Get the OtherMath attribute for a Unicode code-point.
///
/// # Arguments
///  - `code_point` A code-point in the form of a rust `char`.
///
/// # Returns
/// bool value
#[must_use] pub const fn get_other_math(code_point: char) -> bool
{
    const INDEX_MASK : usize = (1 << OTHER_MATH_INDEX_BITS) - 1;
    const COLUMN_MASK : usize = 1;

    let code_point_value = code_point as usize;
    let code_point_lo = code_point_value % OTHER_MATH_CHUNK_SIZE;
    let mut code_point_hi = code_point_value / OTHER_MATH_CHUNK_SIZE;
    if code_point_hi > OTHER_MATH_INDEX_LEN - 1 {
        code_point_hi = OTHER_MATH_INDEX_LEN - 1;
    }

    let index_offset = code_point_hi * OTHER_MATH_INDEX_BITS;
    let index_byte_offset = index_offset / 8;
    let index_bit_offset = index_offset % 8;
    let mut index: usize = 0;
    index |= (OTHER_MATH_DATA[OTHER_MATH_INDEX_BYTE_OFFSET + index_byte_offset + 1] as usize) << 8;
    index |= (OTHER_MATH_DATA[OTHER_MATH_INDEX_BYTE_OFFSET + index_byte_offset + 0] as usize) << 0;
    index >>= index_bit_offset;
    index &= INDEX_MASK;

    let column_offset = (index * OTHER_MATH_CHUNK_SIZE + code_point_lo) * OTHER_MATH_COLUMN_BITS;
    let column_byte_offset = column_offset / 8;
    let column_bit_offset = column_offset % 8;

    let mut value: usize = 0;
    value |= (OTHER_MATH_DATA[column_byte_offset + 0] as usize) << 0;
    value >>= column_bit_offset;
    value &= COLUMN_MASK;

    return match value {
        0 => false,
        _ => true,
    };
}

