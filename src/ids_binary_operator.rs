// This file was generated by the cargo-build script.

const IDS_BINARY_OPERATOR_CHUNK_SIZE : usize = 128;
const IDS_BINARY_OPERATOR_COLUMN_BITS : usize = 1;
const IDS_BINARY_OPERATOR_INDEX_LEN : usize = 101;
const IDS_BINARY_OPERATOR_INDEX_BITS : usize = 2;

const IDS_BINARY_OPERATOR_INDEX_BYTE_OFFSET : usize = 48;

const IDS_BINARY_OPERATOR_DATA: [u8; 75] = [
    // Column table
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,243, 63,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,128,  0,  0,
    // Index table
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64,128,  0,
    // Padding to handle unaligned word reads.
      0,
];

/// Get the IdsBinaryOperator attribute for a Unicode code-point.
///
/// # Arguments
///  - `code_point` A code-point in the form of a rust `char`.
///
/// # Returns
/// bool value
#[must_use] pub const fn get_ids_binary_operator(code_point: char) -> bool
{
    const INDEX_MASK : usize = (1 << IDS_BINARY_OPERATOR_INDEX_BITS) - 1;
    const COLUMN_MASK : usize = 1;

    let code_point_value = code_point as usize;
    let code_point_lo = code_point_value % IDS_BINARY_OPERATOR_CHUNK_SIZE;
    let mut code_point_hi = code_point_value / IDS_BINARY_OPERATOR_CHUNK_SIZE;
    if code_point_hi > IDS_BINARY_OPERATOR_INDEX_LEN - 1 {
        code_point_hi = IDS_BINARY_OPERATOR_INDEX_LEN - 1;
    }

    let index_offset = code_point_hi * IDS_BINARY_OPERATOR_INDEX_BITS;
    let index_byte_offset = index_offset / 8;
    let index_bit_offset = index_offset % 8;
    let mut index: usize = 0;
    index |= (IDS_BINARY_OPERATOR_DATA[IDS_BINARY_OPERATOR_INDEX_BYTE_OFFSET + index_byte_offset + 1] as usize) << 8;
    index |= (IDS_BINARY_OPERATOR_DATA[IDS_BINARY_OPERATOR_INDEX_BYTE_OFFSET + index_byte_offset + 0] as usize) << 0;
    index >>= index_bit_offset;
    index &= INDEX_MASK;

    let column_offset = (index * IDS_BINARY_OPERATOR_CHUNK_SIZE + code_point_lo) * IDS_BINARY_OPERATOR_COLUMN_BITS;
    let column_byte_offset = column_offset / 8;
    let column_bit_offset = column_offset % 8;

    let mut value: usize = 0;
    value |= (IDS_BINARY_OPERATOR_DATA[column_byte_offset + 0] as usize) << 0;
    value >>= column_bit_offset;
    value &= COLUMN_MASK;

    return match value {
        0 => false,
        _ => true,
    };
}

