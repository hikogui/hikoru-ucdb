// This file was generated by the cargo-build script.

const DIACRITIC_CHUNK_SIZE : usize = 128;
const DIACRITIC_COLUMN_BITS : usize = 1;
const DIACRITIC_INDEX_LEN : usize = 980;
const DIACRITIC_INDEX_BITS : usize = 7;

const DIACRITIC_INDEX_BYTE_OFFSET : usize = 1648;

const DIACRITIC_DATA: [u8; 2507] = [
    // Column table
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64,  1,  0,  0,  0,  0,  0,  0,  0,  0,129,144,  1,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,255,255,255,255,255,255,255,255,255,255,
    255,255,255,255,255,255,255,255,255,127,255,224,  7,  0, 48,  4, 48,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    248,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,
      0,  0,254,255,251,255,255,191, 22,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,248,135,  1,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,128, 97, 28,  0,  0,  0,  0,  0,  0,  0,  0,255,255,255,  7,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,192,255,  1,  0,  0,  0,  0,  0,  0,248, 63,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,255,  0,  0,  0,  0,  0,254,  7,  0,248,255,255,127,  0,  0,  0,  0,  0,  0,  0, 16,  0, 32, 30,  0,  0,  0,  2,  0,
      0,  0,  0,  0,  0,  0,  0, 16,  0, 32,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 16,  0, 32,  0,  0,  0,  0,  0,224,
      0,  0,  0,  0,  0,  0,  0, 16,  0, 32, 32,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 32,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0, 24,  0, 32,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  4,128, 95,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  0, 31,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  3,  0,  0,160,194,  0,  0,  0,  0,  0,  0,  0,  0,220,  0,  0,  0,  0,  0,  0,  0, 64,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,128,  6,  0,  0,  0,  0, 24, 62,  0,  0,128,191,  0, 12,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,224,  0,  0,  0,  0,  0,  0, 48,  0,  0,  0, 16,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,254, 15, 32,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 14,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,224,159,  0,  0,  0,  0,  0,  0,255,127,254, 15,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0, 16,  0, 16,  0,  0,  0,  0,248, 15,  0,  0,  0,  0,  0,  0, 12,  0,  0,  0,  0,  0,  0, 64,  0, 12,  0,
      0,  0,  0,  0,  0,  0,192,  0,  0,  0,  0,  0,  0,  0,  0, 63,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,255,255,255, 33,144,  3,
      0,  0,  0,  0,  0,240,255,255,255,255,255,255,255,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,240,255,  0,  0,  0,  0,224,255,
      0,  0,  0,  0,  0,  0,  0,160,  3,224,  0,224,  0,224,  0, 96,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,128,  3,  0,
      0,  0,  0,  0,  0,128,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,252,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0, 30,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,128,  0,176,
      0,  0,  0, 48,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,255,255,255,255,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3, 64,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0, 16,  0,  0,  0,255,255,  3,  0,  0,  0,  0,  0,  0,120,  0,  0,  0,  0,  8,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  8,  0,  1,  0,  0,  0, 32,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 56,
      0,  0,  0,  0,  0,  0,  0,128,  7,  0,  0,  0,  0,  0, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,248,  0, 14,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 48,  0,  0,  0,  0,  0, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,255,255,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64,  1,  0,  0,  0,  0,  0,  1,  0,
      0,  0,  0,192,  0,  0,  0,  0,  0,  0,  0,  0,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,
    191,255,255,255,255,255,253,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,135,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 96,  0,  0,  0,  0,  0,  0,  0,252,  0,  0,  0,  0, 64,  0,  0,  0, 62,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,224,  0,  0,  0,  0,  0,  0,  0,  0,192,255,  1,  0,  0,  0,  0,  0,
     60,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64,  0,  0,  0,  0,  0,  1,  0,
      0,  0,  0,  0,  0,  0,  0,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 24,  0,  0,  0,  0,  0,  0,  0,  8,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  1, 28,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 96,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0, 24,  0, 32,  0,  0,192, 31, 31,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,192, 13,  0,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 68,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0, 12,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,128,  1,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,128,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,192,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 96,  8,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0, 16,  0,128,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0, 52,  0,  0,  0,  0,  0,  0,  0,  0,  0,128,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  6,  0,  0,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,128,255, 63,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 31,  0,  0,  0,  0,  0,  0,  0,127,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 24,  0,  0,  0,128,255,255,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,239,111,255,255,255,255,255, 63,255,255,127,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,128,227,  7,248,231, 15,  0,  0,  0, 60,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,255,255,255,255,255,255,255, 63,  0,  0,  0,  0,  0,  0,  0, 64,  0,  0,  0,  0,  0,  0,  0,240,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,192,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,127,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,112,  7,  0,  0,  0,  0,  0,  0,
    // Index table
    128,128, 64, 32, 24, 16, 10,  2,195,  1,145, 80, 44, 24, 13,199,  3,  2,137, 72, 38, 16,  8,165, 98,185, 96, 50,154,141, 64, 32,
     16,112,  4,  2,129, 64, 32, 16,116, 60,  2,193, 71,  0, 10,137, 70,164,146,233, 36, 16,  8, 80,  2,129, 64, 32, 16,  8,  4,  2,
    129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,130,148, 64,160, 18,  8,  4, 43,150, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,
      8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129,
     64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,
      4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64,
     32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,
      2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32,
     16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,
    129, 64,208,114,189, 96, 49,217,140, 86,179,221,112,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,
      8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129,
     64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,
      4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64,
     32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,228,  4,  2,129, 64,160, 19,236,120,
      2,129, 64, 32,232,  9,  4,  2,129, 64, 32, 16,  8,124,  2,129, 64,240,  3, 10,  4,  2, 65, 80, 32, 16, 14,137, 69,227, 17,153,
     84, 46,153, 77,167,224,  9,141, 74,  5, 70,193,180, 71,173, 10,  4, 80,129,245, 42, 16, 96,  5,  2,129, 64, 32, 16,  8,  4,  2,
    129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4, 89,129, 64, 32, 16,
      8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129,
     64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,
      4,  2,129, 64, 32, 16,  8,  4,  2,129, 74, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32,208,110,  5,  2,  1, 87,
     32, 16,  8,186,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,
      2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32,
     16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,
    129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,188,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,
      8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129,
     64, 32, 16,  8,  4,  2,129, 64, 32, 16,124,  5,  2,  1, 56, 44, 16,  8,  4,  2,129, 64, 32, 16,  8,  4,  2,129, 64, 32, 16,  8,
      4,  2,129, 64, 32, 16,  8,  4, 98,193, 86, 32, 24, 11,  4,  2,129,128, 44, 16,  8,  4,130,178, 89,  0,
    // Padding to handle unaligned word reads.
      0,
];

/// Get the Diacritic attribute for a Unicode code-point.
///
/// # Arguments
///  - `code_point` A code-point in the form of a rust `char`.
///
/// # Returns
/// bool value
#[must_use] pub const fn get_diacritic(code_point: char) -> bool
{
    const INDEX_MASK : usize = (1 << DIACRITIC_INDEX_BITS) - 1;
    const COLUMN_MASK : usize = 1;

    let code_point_value = code_point as usize;
    let code_point_lo = code_point_value % DIACRITIC_CHUNK_SIZE;
    let mut code_point_hi = code_point_value / DIACRITIC_CHUNK_SIZE;
    if code_point_hi > DIACRITIC_INDEX_LEN - 1 {
        code_point_hi = DIACRITIC_INDEX_LEN - 1;
    }

    let index_offset = code_point_hi * DIACRITIC_INDEX_BITS;
    let index_byte_offset = index_offset / 8;
    let index_bit_offset = index_offset % 8;
    let mut index: usize = 0;
    index |= (DIACRITIC_DATA[DIACRITIC_INDEX_BYTE_OFFSET + index_byte_offset + 1] as usize) << 8;
    index |= (DIACRITIC_DATA[DIACRITIC_INDEX_BYTE_OFFSET + index_byte_offset + 0] as usize) << 0;
    index >>= index_bit_offset;
    index &= INDEX_MASK;

    let column_offset = (index * DIACRITIC_CHUNK_SIZE + code_point_lo) * DIACRITIC_COLUMN_BITS;
    let column_byte_offset = column_offset / 8;
    let column_bit_offset = column_offset % 8;

    let mut value: usize = 0;
    value |= (DIACRITIC_DATA[column_byte_offset + 0] as usize) << 0;
    value >>= column_bit_offset;
    value &= COLUMN_MASK;

    return match value {
        0 => false,
        _ => true,
    };
}

